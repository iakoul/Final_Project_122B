Task 1
Connection pooling

We use connection pooling in our project at any point where we need to access the database. This includes the search results, the purchase page where we enter purchase information into the database, the metadata page, the login page, and anywhere else we would normally set up a database connection. Connection pooling allows us to reuse connections between threads rather than create a new one every time one is needed. When we do a read, we grab a connection from the localhost database pool, and when we need to read, we grab a connection from the mysql master connection pool.

Task 2
Connection pooling with two backend servers

One way to use connection pooling to read from either the slave or master server when there are two servers is to use a random function to choose from either the master or the slave servers when choosing which read connection pool to use. If the random function is decently random, then on average about half the read connections from either server will go to each of the mysql servers. Writes must always go to the master server.

We did not do this, however. We made each server do reads on its localhost mysql server and writes to the master server.